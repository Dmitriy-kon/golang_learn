package main

import "fmt"

// Если несколько переменных имеюют один и тот же парамметр, то можно использовать форму, как ниже

func main() {
	main3()
}

func add(x, y int, a, b, c float32) {
	var z = x + y
	var d = a + b + c
	fmt.Println("x + y = ", z)
	fmt.Println("a + b + c = ", d)
}

// В качестве аргументов при вызове функции можно передавать и значения переменных,
// результаты операций или других функций, но при этом следует учитывать, что если аргументы в функцию передаются по значению то они копируются:

func main2() {
	var a = 8
	fmt.Println("a before: ", a)
	increment(a)
	fmt.Println("a after: ", a)
}
func increment(x int) {

	fmt.Println("x before: ", x)
	x = x + 20
	fmt.Println("x after: ", x)
}

// В Go функция может возвращать сразу несколько значений. В этом случае после списка параметров указывается в скобках список типов возвращаемых значений.
// А после оператора return располагаются через запятую все возвращаемые значения:

func main3() {
	var age, name = add2(4, 5, "Tom", "Simpson")
	fmt.Println(age)  // 9
	fmt.Println(name) // Tom Simpson
}

func add2(x, y int, firstName, lastName string) (int, string) {
	var z int = x + y
	var fullName = firstName + " " + lastName
	return z, fullName
}

// Go позволяет проигнорировать все или определенные возвращаемые функцией значения, если мы не будем использовать их в дальнейшем.
// Для этого нам необходимо не присваивать им имена вообще либо заменить имя символом _. Рассмотрим это на примере:
// В первом примере мы проигнорировали оба возвращаемых значения, выполнив полезную работу функции
// (так мы часто делаем, когда используем функцию fmt.Print - игнорируя возвращаемые ею значения).

// Во втором примере мы проигнорировали сообщение об ошибке (не делайте так), а в третьем - только проверили, возвратила ли функция ошибку, проигнорировав возвращаемое число.
func fn() (int, error) {
	// Какая-то полезная работа
	// ...
	return 0, nil
}
func ExampleIgnor() {
	fn()

	i, _ := fn()
	fmt.Println(i)

	_, err := fn()
	if err == nil {
		fmt.Println("Ошибок нет")
	}

	// Output:
	// 0
}
