package main

import "fmt"

//range выводит индекс элемента и сам элемент
/*
Range возвращает 2 объекта: индекс элемента в массиве и копию значения этого элемента.
Любой из этих объектов должен быть опущен, если мы не планируем использовать его, для этого вместо имени переменной мы можем указать символ _.
Кроме того, если мы хотим использовать только индекс элемента, мы можем вообще не использовать второе возвращаемое значение:
*/

/*
Необходимо запомнить, что в качестве второго значения range возвращает копию элемента массива, это может быть важно, если в цикле мы хотим изменить массив.
В этом случае мы должны обращаться к элементам массива по индексу:
*/
func main() {
	a := [5]int{1, 2, 3, 4, 5}
	fmt.Println(a) // [1 2 3 4 5]

	for idx, elem := range a {
		fmt.Printf("Элемент с индексом %d: %d\n", idx, elem)
	}

	//----------------------------------
	a := [5]int{1, 2, 3, 4, 5}

	for idx := range a {
		fmt.Println(a[idx])
	}

	for idx, _ := range a {
		// В этом случае следует использовать приведенный выше вариант,
		// хотя технически эти варианты работают одинаково
		fmt.Println(a[idx])
	}

	for _, elem := range a {
		fmt.Println(elem)
	}

	// -------------------------
	a := [5]int{1, 2, 3, 4, 5}
	fmt.Println(a) // [1 2 3 4 5]

	for _, elem := range a {
		elem = 100
		fmt.Println(elem)

		// 100
		// 100
		// 100
		// 100
		// 100
	}
	fmt.Println(a) // [1 2 3 4 5]

	for idx := range a {
		a[idx] = 100
		fmt.Println(a[idx])

		// 100
		// 100
		// 100
		// 100
		// 100
	}

	for idx, _ := range a {
		fmt.Scan(&a[idx])
		if min > a[idx] {
			min = a[idx]
		}
	}
	fmt.Println(a) // [100 100 100 100 100]
}
